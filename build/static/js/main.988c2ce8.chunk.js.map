{"version":3,"sources":["images/drop.svg","images/markerRed.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Leaflet","Icon","Default","imagePath","iconUrl","require","iconRetinaUrl","iconSize","iconAnchor","popupAnchor","shadowUrl","shadowSize","shadowAnchor","className","Hydro","icon","myIconMarker","this","props","coords","Map","center","latitude","longitude","zoom","TileLayer","attribution","url","Marker","position","Popup","hydroData","map","hydat","key","properties","STATION_ID","geometry","coordinates","NAME","href","rel","target","Component","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.988c2ce8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/drop.f403f0c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/markerRed.c6fe84c8.svg\";","\n// @flow\n\nimport React, { Component } from 'react'\n//import { Icon } from \"leaflet\";\nimport Leaflet from 'leaflet';\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport * as hydroData from \"./data/hydrometric.json\";\nimport \"./App.css\";\nimport \"./leaflet.css\";\nimport { geolocated } from \"react-geolocated\";\nLeaflet.Icon.Default.imagePath =  '//cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.4/images/'\n  \n\n  // const drop = new Icon({\n  //   iconUrl: \"/drop.svg\",\n  //   iconSize: [5, 5]\n  // });\n\n   const iconWaterDrop = new Leaflet.Icon({\n     iconUrl: require('./images/drop.svg'),\n     iconRetinaUrl: require('./images/drop.svg'),\n     iconSize:     [10,10], \n     iconAnchor: null,\n     popupAnchor: null,\n     shadowUrl: null,\n     shadowSize: null,\n     shadowAnchor: null,\n     className: 'leaflet-div-icon'\n });\n\n export { iconWaterDrop };\n\nexport class Hydro extends Component<{}> {\n\n  \n\n\n\n  render() {\n\n\n    const myIconDrop = Leaflet.icon({\n    iconUrl: require('./images/drop.svg'),\n    iconSize: [10,10],\n    iconAnchor: [10,10],//[32, 64],\n    popupAnchor: null,\n    shadowUrl: null,\n    shadowSize: null,\n    shadowAnchor: null\n    });\n\n\n    const myIconMarker = Leaflet.icon({\n    iconUrl: require('./images/markerRed.svg'),\n    iconSize: [10,10],\n    iconAnchor: [10,10],//[32, 64],\n    popupAnchor: null,\n    shadowUrl: null,\n    shadowSize: null,\n    shadowAnchor: null\n    });\n\n    return (\n      this.props.coords \n      ? (<Map center={[this.props.coords.latitude, this.props.coords.longitude]} zoom={5}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker icon={myIconMarker} position={[this.props.coords.latitude, this.props.coords.longitude]}>\n          <Popup>\n            You are here. <br /> Ya you.\n          </Popup>\n        </Marker>\n\n\n      {hydroData.features.map(hydat => (\n       <Marker \n       /*icon={myIconDrop}*/\n       key={hydat.properties.STATION_ID} \n       position={[\n         hydat.geometry.coordinates[0],\n         hydat.geometry.coordinates[1]\n       ]}\n       >\n      <Popup>\n      {hydat.properties.STATION_ID} <br /> {hydat.properties.NAME} <br />\n        <a href={\"https://merrittr.shinyapps.io/hydroshiny/?y=waterlevel&z=\" + hydat.properties.STATION_ID} rel=\"noopener noreferrer\" target=\"_blank\">Water Level (m)</a> <br />\n        <a href={\"https://merrittr.shinyapps.io/hydroshiny/?y=DischargeDebit&z=\" + hydat.properties.STATION_ID} rel=\"noopener noreferrer\" target=\"_blank\">Discharge (cms)</a>\n       </Popup>\n      </Marker>\n      ))}\n      </Map>) \n      :\n      (<Map center={[52.1332, -106.6700]} zoom={5}>\n        <TileLayer\n          url=\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n      <Marker icon={myIconMarker} position={[52.1332, -106.6700]}>\n        <Popup>\n          A pretty CSS3 popup. <br /> Easily customizable.\n        </Popup>\n      </Marker>\n       \n      {hydroData.features.map(hydat => (\n       <Marker \n       /*icon={myIconDrop}*/\n       key={hydat.properties.STATION_ID} \n       position={[\n         hydat.geometry.coordinates[0],\n         hydat.geometry.coordinates[1]\n       ]}\n       >\n          <Popup>\n          <a href={\"https://merrittr.shinyapps.io/hydroshiny/?y=waterlevel&z=\" + hydat.properties.STATION_ID} rel=\"noopener noreferrer\" target=\"_blank\">Hydrometric station <br /> {hydat.properties.STATION_ID} <br /> {hydat.properties.NAME}</a> \n          </Popup>\n      </Marker>\n      ))}\n      </Map>)\n    )\n  }\n}\n\n export default geolocated({\n   positionOptions: {\n       enableHighAccuracy: false,\n   },\n   userDecisionTimeout: 5000,\n })(Hydro);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}